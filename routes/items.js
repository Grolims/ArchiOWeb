const express = require('express');
const router = express.Router();
const { ObjectId } = require('bson');
const User = require('../models/user');
const Salepoint = require('../models/salepoint');
const Item = require('../models/item');
const { authenticate } = require('./auth');
const asyncHandler = require('express-async-handler');
const { broadcastMessage } = require('../messaging');

/* POST new item */
/**
 * @api {post} /items Create a item
 * @apiName CreateItem
 * @apiGroup Item
 * @apiVersion 1.0.0
 * @apiDescription Registers a new Item.
 *
 * @apiUse ItemInRequestBody
 * @apiUse ItemInResponseBody
 * @apiUse ItemValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the Item generated by the server
 *
 * @apiExample Example
 *     POST /items HTTP/1.1
 *     Content-Type: application/json

 *
 *     {
 *       "name": "Melon",
 *       "type": "Fruit",
 *       "picture": "/img/melon.jpg",
 *       "price": 3,
 *       "description": "Melon de Cavaillon",
 *       "label":"Bio",
 *       "userId": "61938a9304230581f9fc2844"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://localsearch-ch.herokuapp.com/items/58b2926f5e1def0123e97bc0
 *
 *     {
 *       "name": "Melon",
 *       "type": "Fruit",
 *       "picture": "/img/melon.jpg",
 *       "price": 3,
 *       "description": "Melon de Cavaillon",
 *       "label":"Bio",
 *       "userId": "61938a9304230581f9fc2844"
 *       "_id": "6193aed08f93c92068be1a31",
 *       "creationDate": "2021-11-16T13:14:56.773Z",
 *       "lastModified": "2021-11-16T13:14:56.773Z",
 *       "__v": 0
 *     }
 */
router.post('/', authenticate, asyncHandler(async (req, res, next) => {

  const existsUser = await User.countDocuments({ _id: req.body.userId });
  const existsSalepoint = await Salepoint.countDocuments({ _id: req.body.salepointId });

  if (!existsUser) {
      return res.status(400).send('User ID missing or invalid')
    }

  if (!existsSalepoint) {
      return res.status(400).send('Salepoint ID missing or invalid')
    }

    const newItem = new Item(req.body);
    await newItem.save();
    res.status(201).send(newItem);
    broadcastMessage({ item: newItem });
  })
);

/* GET paginated items listing */
/**
 * @api {get} /items List item
 * @apiName RetrieveItem
 * @apiGroup Item
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a paginated list of item sorted by name (in alphabetical order).
 *
 * @apiUse ItemInResponseBody
 *
 * @apiParam (URL query parameters) {Number} [priceLow] Select only item under this price
 * @apiParam (URL query parameters) {Number} [priceHigh] Select only item over this price
 * 
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: https://localsearch-ch.herokuapp.com/items?priceLow=4&page=1&pageSize=100"
 *
 * {
 *  "page": 1,
 *  "pageSize": 100,
 *  "total": 2,
 *  "data": [
 *      {
 *       "name": "Melon",
 *       "type": "Fruit",
 *       "picture": "/img/melon.jpg",
 *       "price": 3,
 *       "description": "Melon de Cavaillon",
 *       "label":"Bio",
 *       "userId": "61938a9304230581f9fc2844"
 *       "_id": "6193aed08f93c92068be1a31",
 *       "creationDate": "2021-11-16T13:14:56.773Z",
 *       "lastModified": "2021-11-16T13:14:56.773Z",
 *       "__v": 0
 *     },
 *      {
 *       "name": "Banane",
 *       "type": "Fruit",
 *       "picture": "/img/banane.jpg",
 *       "price": 3,
 *       "description": "banane jaune",
 *       "label":"Bio",
 *       "userId": "61938a9304230581f9fc2844"
 *       "_id": "4567aed08f93c92068be1a31",
 *       "creationDate": "2021-11-16T13:14:56.773Z",
 *       "lastModified": "2021-11-16T13:14:56.773Z",
 *       "__v": 0
 *     }
 *   ]
 * }
 */
router.get('/', asyncHandler(async (req, res, next) => {
  
    const total = await Item.count();
    let query = Item.find();

    if (Array.isArray(req.query.userId)) {
      const user = req.query.userId.filter(ObjectId.isValid);
      query = query.where('userId').in(users);
    } else if (ObjectId.isValid(req.query.userId)) {
      query = query.where('userId').equals(req.query.userId);
    }

    if (Array.isArray(req.query.salepointId)) {
      const salepoint = req.query.salepointId.filter(ObjectId.isValid);
      query = query.where('salepointId').in(salepoints);
    } else if (ObjectId.isValid(req.query.salepointId)) {
      query = query.where('salepointId').equals(req.query.salepointId);
    }
  
    if (!isNaN(req.query.price)) {
      query = query.where('price').equals(req.query.price);
    }
  
    if (!isNaN(req.query.priceHigh)) {
      query = query.where('price').gte(req.query.priceHigh);
    }
  
    if (!isNaN(req.query.priceLow)) {
      query = query.where('price').lte(req.query.priceLow);
    }
  
    //filter by 

    let page = parseInt(req.query.page, 10);
    if (isNaN(page) || page < 1) {
      page = 1;
    }
    // Parse the "pageSize" param (default to 100 if invalid)
    let pageSize = parseInt(req.query.pageSize, 10);
    if (isNaN(pageSize) || pageSize < 0 || pageSize > 100) {
      pageSize = 100;
    }
    // Apply skip and limit to select the correct page of elements
    query = query.skip((page - 1) * pageSize).limit(pageSize);

    query = await query.exec();

    res.send({
      page: page,
      pageSize: pageSize,
      total: total,
      data: query
    });
  })
);


/**
 * @api {get} /items/:id GET itme by id and associated user
 * @apiName RetrieveItem
 * @apiGroup Item
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one item.
 *
 * @apiUse ItemIdInUrlPath
 * @apiUse ItemInResponseBody
 * @apiUse ItemNotFoundError
 *
 * @apiExample Example
 *     GET /items/6193aed08f93c92068be1a31 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "name": "Melon",
 *       "type": "Fruit",
 *       "picture": "/img/melon.jpg",
 *       "price": 3,
 *       "description": "Melon de Cavaillon",
 *       "label":"Bio",
 *       "userId": "61938a9304230581f9fc2844"
 *       "_id": "6193aed08f93c92068be1a31",
 *       "creationDate": "2021-11-16T13:14:56.773Z",
 *       "lastModified": "2021-11-16T13:14:56.773Z",
 *       "__v": 0
 *     }
 */
router.get('/:id', loadItemFromParamsMiddleware, asyncHandler(async (req, res, next) => {
    res.send(req.item);
  })
);

/**
 * @api {patch} /items/:id Partially update a item
 * @apiName PartiallyUpdateItem
 * @apiGroup Item
 * @apiVersion 1.0.0
 * @apiDescription Partially updates a item's data (only the properties found in the request body will be updated).
 * All properties are optional.
 *
 * @apiUse ItemIdInUrlPath
 * @apiUse ItemInRequestBody
 * @apiUse ItemInResponseBody
 * @apiUse ItemNotFoundError
 * @apiUse ItemValidationError
 *
 * @apiExample Example
 *     PATCH /items/619126a15f69d38480a2a49f HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "price": 2
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "name": "Melon",
 *       "type": "Fruit",
 *       "picture": "/img/melon.jpg",
 *       "price": 2,
 *       "description": "Melon de Cavaillon",
 *       "label":"Bio",
 *       "userId": "61938a9304230581f9fc2844"
 *       "_id": "6193aed08f93c92068be1a31",
 *       "creationDate": "2021-11-16T13:14:56.773Z",
 *       "lastModified": "2021-11-16T13:14:56.773Z",
 *       "__v": 0
 *     }
 */
router.patch('/:id', authenticate, loadItemFromParamsMiddleware, checkOwnerOrAdmin, asyncHandler(async (req, res, next) => {

    if (req.body.name !== undefined) {
      req.item.name = req.body.name;
    }

    if (req.body.type !== undefined) {
      req.item.type = req.body.type;
    }

    if (req.body.picture !== undefined) {
      req.item.picture = req.body.picture;
    }

    if (req.body.price !== undefined) {
      req.item.price = req.body.price;
    }

    if (req.body.description !== undefined) {
      req.item.description = req.body.description;
    }

    if (req.body.label !== undefined) {
      req.item.label = req.body.label;
    }

    await req.item.save();
    res.status(200).send(`Item ${req.item.name} has been succesfully updated!`)
  })
);
/**
 * @api {delete} /items/:id Delete a item
 * @apiName DeleteItem
 * @apiGroup Item
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes a item
 * 
 * @apiExample Example
 *     DELETE /items/6193aed08f93c92068be1a31 HTTP/1.1
 * 
 * @apiSuccessExample 204 No Content
 *     HTTP/1.1 204 No Content
 */
router.delete('/:id', authenticate, loadItemFromParamsMiddleware, checkOwnerOrAdmin, asyncHandler(async (req, res, next) => {
    await Item.deleteOne({
      _id: req.params.id
    });

    res.status(200).send(`Ressource : ${req.item.name} deleted`)
  })
);

async function loadItemFromParamsMiddleware(req, res, next) {
  const itemId = req.params.id;
  if (!ObjectId.isValid(itemId)) {
    return itemNotFound(res, itemId)
  }

  const item = await Item.findById(req.params.id);
  if (!item) { return itemNotFound(res, itemId) }
  req.item = item;
  next();
}

function itemNotFound(res, itemId) {
  return res.status(404).type('text').send(`No item found with ID ${itemId}`)
}

function checkOwnerOrAdmin(req, res, next) {

  const autho = req.currentUserPermissions === 'admin' || req.item.userId.toString() === req.currentUserId;
  if (!autho) {
    return res.status(403).send('Insufficient permissions')
  }


  next();
}



/**
 * @apiDefine ItemIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the item to retrieve
 */

/**
 * @apiDefine ItemInRequestBody
 * @apiParam (Request body) {String{3..30}} name The name of the item (must be unique)
 * @apiParam (Request body) {String="Fruit", "Viande", "Légumes", "Céréales", "Boissons", "Autre"} type Type of the item
 * @apiParam (Request body) {String} picture Picture of the item
 * @apiParam (Request body) {String} price Price of the item
 * @apiParam (Request body) {String{max 300}} description Description of the item
 * @apiParam (Request body) {String="Bio", "Vegan"} label Label of the item
 * @apiParam (Request body) {Schema.Types.ObjectId} userId The ID of the creator of the item
 */

/**
 * @apiDefine ItemInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the Item
 * @apiSuccess (Response body) {String} name The name of the item (must be unique)
 * @apiSuccess (Response body) {String} type Type of the item
 * @apiSuccess (Response body) {String} picture URL of the item's picture
 * @apiSuccess (Response body) {String} price Price of the item
 * @apiSuccess (Response body) {String} description Description of the item
 * @apiSuccess (Response body) {String} label Label of the item
 * @apiSuccess (Response body) {Schema.Types.ObjectId} userId The ID of the creator of the item
 * @apiSuccess (Response body) {Date} creationDate The creation's date of the item
 * @apiSuccess (Response body) {Date} lastModified The date of the last modification of the item
 */

/**
 * @apiDefine ItemNotFoundError
 *
 * @apiError {Object} 404/NotFound No Item was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No Item found with ID 6193aed08f93c92068be1a31
 */

/**
 * @apiDefine ItemValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the Item's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Item validation failed",
 *       "errors": {
 *         "label": {
 *           "kind": "enum",
 *           "message": "`test` is not a valid enum value for path `label`.",
 *           "name": "ValidatorError",
 *           "path": "label",
 *           "properties": {
 *             "enumValues": [
 *               "Bio",
 *               "Vegan"
 *             ],
 *             "message": "`{VALUE}` is not a valid enum value for path `{PATH}`.",
 *             "path": "label",
 *             "type": "enum",
 *             "value": "test"
 *           },
 *           "value": "test"
 *         }
 *       }
 *     }
 */
module.exports = router;
