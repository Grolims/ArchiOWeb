var express = require('express');
const asyncHandler = require('express-async-handler');
var router = express.Router();
const { ObjectId } = require('bson');
const Salepoint = require('../models/salepoint');
const User = require('../models/user');
const Item = require('../models/item');
const { authenticate } = require('./auth');

/* POST new salepoint */
/**
 * @api {post} /api/salepoints Create a salepoint
 * @apiName CreateSalepoint
 * @apiGroup Salepoint
 * @apiVersion 1.0.0
 * @apiDescription Registers a new salepoint.
 *
 * @apiUse SalepointInRequestBody
 * @apiUse SalepointInResponseBody
 * @apiUse SalepointValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the salepoint generated by the server
 *
 * @apiExample Example
 *     POST /api/salepoints HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "username": "Kestar",
 *       "admin": true,
 *       "password": "1234test"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://comem-rest-demo.herokuapp.com/api/salepoints/58b2926f5e1def0123e97bc0
 *
 *     {
 *       "username": "Kestar",
 *       "admin": true,
 *       "_id": "61912511d1f3e541d9a2177c",
 *       "registrationdate": "2021-11-14T15:02:41.974Z",
 *       "__v": 0
 *     }
 */
router.post('/', authenticate, asyncHandler(async (req, res, next) => {

  const exists = await User.countDocuments({
    _id: req.body.userId
  });

  if (!exists) {
    return res.status(400).send('User ID missing or invalid')
  }

  if (req.body.items !== undefined) {
    return res.status(400).send('Items can only be added after salepoint creation')
  }

  const newSalepoint = new Salepoint(req.body);
  await newSalepoint.save();
  res.status(201).send(newSalepoint);

}));

/* GET paginated salepoints listing */
/**
 * @api {get} /api/salepoints List salepoint
 * @apiName RetrieveSalepoint
 * @apiGroup Salepoint
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a paginated list of Salepoint sorted by name (in alphabetical order).
 *
 * @apiUse SalepointInResponseBody
 *
 * @apiParam (URL query parameters) {String} [gender] Select only Salepoint of the specified gender
 *
 * @apiExample Example
 *     GET /api/salepoints?gender=male&page=2&pageSize=50 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: &lt;https://comem-rest-demo.herokuapp.com/api/salepoints?page=1&pageSize=50&gt;; rel="first prev"
 *
 * {
 *  "page": 1,
 *  "pageSize": 100,
 *  "total": 2,
 *  "data": [
 *      {
 *          "_id": "61912511d1f3e541d9a2177c",
 *          "username": "Kestar",
 *          "admin": true,
 *          "registrationdate": "2021-11-14T15:02:41.974Z",
 *          "__v": 0
 *      },
 *      {
 *          "_id": "619126a15f69d38480a2a49f",
 *          "username": "Mikvester",
 *          "admin": false,
 *          "registrationdate": "2021-11-14T15:09:21.935Z",
 *          "__v": 0
 *      }
 *   ]
 * }
 */
router.get('/', asyncHandler(async (req, res, next) => {
  const total = await Salepoint.count();
  let query = Salepoint.find();

  let page = parseInt(req.query.page, 10);
  if (isNaN(page) || page < 1) {
    page = 1;
  }
  // Parse the "pageSize" param (default to 100 if invalid)
  let pageSize = parseInt(req.query.pageSize, 10);
  if (isNaN(pageSize) || pageSize < 0 || pageSize > 100) {
    pageSize = 100;
  }
  // Apply skip and limit to select the correct page of elements
  query = query.skip((page - 1) * pageSize).limit(pageSize);

  query = await query.exec();

  res.send({
    page: page,
    pageSize: pageSize,
    total: total,
    data: query
  });

}));

/* GET salepoint by id and associated user & items */
/**
 * @api {get} /api/salepoints/:id GET salepoint by id and associated users & items
 * @apiName RetrieveSalepoint
 * @apiGroup Salepoint
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one Salepoint.
 *
 * @apiUse SalepointIdInUrlPath
 * @apiUse SalepointInResponseBody
 * @apiUse SalepointNotFoundError
 *
 * @apiExample Example
 *     GET /api/salepoints/58b2926f5e1def0123e97bc0 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "_id": "61912511d1f3e541d9a2177c",
 *       "username": "Kestar",
 *       "admin": true,
 *       "registrationdate": "2021-11-14T15:02:41.974Z",
 *     }
 */
router.get('/:id', loadSalepointFromParamsMiddleware, async function (req, res, next) {
  res.send(req.salepoint);
});

/* PATCH salepoint by id */
/**
 * @api {patch} /api/salepoints/:id Partially update a salepoint
 * @apiName PartiallyUpdateSalepoint
 * @apiGroup Salepoint
 * @apiVersion 1.0.0
 * @apiDescription Partially updates a salepoint's data (only the properties found in the request body will be updated).
 * All properties are optional.
 *
 * @apiUse SalepointIdInUrlPath
 * @apiUse SalepointInRequestBody
 * @apiUse SalepointInResponseBody
 * @apiUse SalepointNotFoundError
 * @apiUse SalepointValidationError
 *
 * @apiExample Example
 *     PATCH /api/salepoints/619126a15f69d38480a2a49f HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "price": 2
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "_id": "619126a15f69d38480a2a49f",
 *       "name": "Drink new Gen",
 *       "type": "Boissons",
 *       "picture": "URLAMETTRE",
 *       "price": 2, 
 *       "description": "A new generation of drinks",
 *       "label": "Vegan", 
 *       "userId": "619126a15f69d38480a2a49f",
 *       "creationdate": "2021-10-14T15:09:21.935Z",
 *       "lastModified": "2021-11-14T15:14:21.935Z",
 *     }
 */
router.patch('/:id', authenticate, loadSalepointFromParamsMiddleware, checkOwnerOrAdmin, asyncHandler(async (req, res, next) => {

  if (req.body.address !== undefined) {
    req.salepoint.address = req.body.address;
  }

  if (req.body.paymentMethod !== undefined) {
    req.salepoint.paymentMethod = req.body.paymentMethod;
  }

  if (req.body.picture !== undefined) {
    req.salepoint.picture = req.body.picture;
  }

  if (req.body.items !== undefined) {
    if (!Array.isArray(req.body.items)) {
      return res.status(400).send('Invalid items structure')
    }
    for (let itemId of req.body.items) {
      if (!ObjectId.isValid(itemId)) { 
        return res.status(400).send('Invalid itemId')
      }
      const exists = await Item.countDocuments({ _id: itemId});
      if (!exists) {
        return res.status(400).send(`Item with id ${itemId} doesn't exist`)
      }
    }
  }

  await req.salepoint.save();
  res.status(200).send(`Salepoint ${req.salepoint.address} has been succesfully updated!`)

}));

/* DELETE salepoint by id */
/**
 * @api {delete} /api/salepoints/:id Delete a salepoint
 * @apiName DeleteSalepoint
 * @apiGroup Salepoint
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes a salepoint
 * 
 * @apiExample Example
 *     DELETE /api/salepoints/58b2926f5e1def0123e97bc0 HTTP/1.1
 * 
 * @apiSuccessExample 204 No Content
 *     HTTP/1.1 204 No Content
 */
router.delete('/:id', authenticate, loadSalepointFromParamsMiddleware, checkOwnerOrAdmin, asyncHandler(async (req, res, next) => {
  await Salepoint.deleteOne({
    _id: req.params.id
  });

  res.status(200).send(`Ressource : ${req.salepoint.address} deleted`)
}));


function querySalepoints(req) {

  let query = Salepoint.find();

  if (ObjectId.isValid(req.query.userId)) {
    query = query.where('userId').equals(req.query.userId);
  }

  if (Array.isArray(req.query.items)) {
    const items = req.query.items(filter(ObjectId.isValid));
    query = query.where('items').in(items);
  } else if (ObjectId.isValid(req.query.items)) {
    query = query.where('items').equals(req.query.items);
  }

  if (!isNaN(req.query.paymentMethod)) {
    query = query.where('paymentMethod').equals(req.query.paymentMethod);
  }

  return query;
}

async function loadSalepointFromParamsMiddleware(req, res, next) {
  const salepointId = req.params.id;
  if (!ObjectId.isValid(salepointId)) {
    return salepointNotFound(res, salepointId)
  }

  const salepoint = await Salepoint.findById(req.params.id);
  if (!salepoint) {
    return salepointNotFound(res, salepointId)
  }

  req.salepoint = salepoint;
  next();
}

function salepointNotFound(res, salepointId) {
  return res.status(404).type('text').send(`No salepoint found with ID ${salepointId}`)
}

function checkOwnerOrAdmin(req, res, next) {
  const autho = req.currentUserPermissions === 'admin' || req.salepoint.userId.toString() === req.currentUserId;
  console.log(req.currentUserId);
  console.log(req.salepoint.userId);
  if (!autho) {
    return res.status(403).send('Insufficient permissions')
  }
  next();
}

/**
 * @apiDefine SalepointIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the Salepoint to retrieve
 */

/**
 * @apiDefine SalepointInRequestBody
 * @apiParam (Request body) {String{3..300}} address The address of the Salepoint 
 * @apiParam (Request body) {String} picture Picture of the Salepoint
 * @apiParam (Request body) {String="Card", "Cash", "Twint"} paymentMethod Payment method of the salepoint
 * @apiParam (Request body) {Schema.Types.ObjectId} userId The ID of the owner of the Salepoint
 * @apiParam (Request body) {[Schema.Types.ObjectId]} items List of items in the Salepoint
 */

/**
 * @apiDefine SalepointInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the Salepoint
 * @apiSuccess (Response body) {String} address The address of the Salepoint 
 * @apiSuccess (Response body) {String} picture Picture of the Salepoint
 * @apiSuccess (Response body) {String} paymentMethod Payment method of the salepoint
 * @apiSuccess (Response body) {Schema.Types.ObjectId} userId The ID of the owner of the Salepoint
 * @apiSuccess (Response body) {[Schema.Types.ObjectId]} items List of items in the Salepoint
 * @apiSuccess (Response body) {Date} creationDate The creation's date of the salepoint
 * @apiSuccess (Response body) {Date} lastModified The date of the last modification of the salepoint 
*/

/**
 * @apiDefine SalepointNotFoundError
 *
 * @apiError {Object} 404/NotFound No Salepoint was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No Salepoint found with ID 58b2926f5e1def0123e97bc0
 */

/**
 * @apiDefine SalepointValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the Salepoint's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Salepoint validation failed",
 *       "errors": {
 *         "label": {
 *           "kind": "enum",
 *           "message": "`test` is not a valid enum value for path `label`.",
 *           "name": "ValidatorError",
 *           "path": "label",
 *           "properties": {
 *             "enumValues": [
 *               "Bio",
 *               "Vegan"
 *             ],
 *             "message": "`{VALUE}` is not a valid enum value for path `{PATH}`.",
 *             "path": "label",
 *             "type": "enum",
 *             "value": "test"
 *           },
 *           "value": "test"
 *         }
 *       }
 *     }
 */

module.exports = router;