var express = require('express');
const asyncHandler = require('express-async-handler');
const bcrypt = require('bcrypt');
var router = express.Router();
const mongoose = require('mongoose');
const User = require('../models/user');
const Item = require('../models/item');
const ObjectId = mongoose.Types.ObjectId;
const secretKey = process.env.SECRET_KEY || 'MikkelBoss';
const jwt = require('jsonwebtoken');
const { authenticate } = require('./auth');



/**
 * @api {post} /api/user Create a user
 * @apiName CreateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Registers a new user.
 *
 * @apiUse UserInRequestBody
 * @apiUse UserInResponseBody
 * @apiUse UserValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the user generated by the server
 *
 * @apiExample Example
 *     POST /api/user HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "username": "Kestar",
 *       "admin": true,
 *       "registrationdate": "1996-11-11T08:30:00.000Z",
 *       "password": "zeqjfge6fedwe6e3f382"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://comem-rest-demo.herokuapp.com/api/user/58b2926f5e1def0123e97bc0
 *
 *     {
 *       "id": "58b2926f5e1def0123e97bc0",
 *       "username": "Kestar",
 *       "admin": true,
 *       "registrationdate": "2020-11-11T08:30:00.000Z"
 *     }
 */
router.post('/', asyncHandler(async (req, res, next) => {

  const plainPassword = req.body.password;
  const costFactor = 10;

  const hashedPassword = await bcrypt.hash(plainPassword, costFactor)
  const newUser = new User(req.body);
  newUser.password = hashedPassword;
  // Save that document
  await newUser.save();
  res.status(201).send(newUser);

}));


/**
 * @api {get} /api/user List user
 * @apiName RetrieveUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a paginated list of user sorted by name (in alphabetical order).
 *
 * @apiUse UserInResponseBody
 *
 * @apiParam (URL query parameters) {String} [gender] Select only user of the specified gender
 *
 * @apiExample Example
 *     GET /api/user?gender=male&page=2&pageSize=50 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: &lt;https://comem-rest-demo.herokuapp.com/api/user?page=1&pageSize=50&gt;; rel="first prev"
 *
 *     [
 *       {
 *       "id": "58b2926f5e1def0123e97bc0",
 *       "username": "Kestar",
 *       "admin": false,
 *       "registrationdate": "2020-11-11T08:30:00.000Z"
 *     },
 *       {
 *       "id": "58b3226f5a1def0453e97bc0",
 *       "username": "Mikvester",
 *       "admin": false,
 *       "registrationdate": "2020-06-11T08:30:00.000Z"
 *     }
 *     ]
 */
router.get('/', asyncHandler(async (req, res, next) => {
  const total = await User.count();

  let query = User.find();

  let page = parseInt(req.query.page, 10);
  if (isNaN(page) || page < 1) {
    page = 1;
  }
  // Parse the "pageSize" param (default to 100 if invalid)
  let pageSize = parseInt(req.query.pageSize, 10);
  if (isNaN(pageSize) || pageSize < 0 || pageSize > 100) {
    pageSize = 100;
  }
  // Apply skip and limit to select the correct page of elements
  query = query.skip((page - 1) * pageSize).limit(pageSize);

  query = await query.exec();

  res.send({
    page: page,
    pageSize: pageSize,
    total: total,
    data: query
  });

})
);

/* GET user by id and associated items & salepoints */
router.get('/:id', loadUserFromParamsMiddleware, asyncHandler(async (req, res, next) => {
  console.log('aggregate')
  User.aggregate([
    {
    $match:{
      _id: ObjectId(req.params.id)

    }
    },
    {
      $lookup: {
        from: 'items',
        localField: '_id',
        foreignField: 'userId',
        as: 'itemAdd'
      }
    },
    {
      $unwind: {
        path: '$itemAdd',
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $addFields: {
       itemAdd: {
          $cond: {
            if: '$itemAdd',
            then: 1,
            else: 0
          }
        }
      }
    },
    {
      $group: {
        _id: '$_id',
        username: { $first: '$username' },
        itemAdd: { $sum: '$itemAdd'},
      }
    }
  ], (err, results) => {
    if (err) {
      return next(err);
    }
    
    const aggregatedDocu = results.map(result => {
      const user = new User(result);
      const json = user.toJSON();
      json.itemAdd = result.itemAdd;
      return json;
    });
    res.send(aggregatedDocu);
  });

}));


/**
 * Update a specific user
 */
router.patch('/:id', authenticate, loadUserFromParamsMiddleware, checkOwnerOrAdmin, asyncHandler(async (req, res, next) => {

  if (req.body.username !== undefined) {
    req.user.username = req.body.username;
  }

  if (req.body.admin !== undefined) {
    req.user.admin = req.body.admin;
  }

  if (req.body.password !== undefined) {
    const plainPassword = req.body.password;
    const costFactor = 10;

    const hashedPassword = await bcrypt.hash(plainPassword, costFactor)
    req.user.password = hashedPassword;
  }

  await req.user.save();
  res.status(200).send(req.user);

})
);


/**
 * @api {delete} /api/movies/:id Delete a user
 * @apiName DeleteUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes a user
 */
router.delete('/:id', authenticate, loadUserFromParamsMiddleware, checkOwnerOrAdmin, asyncHandler(async (req, res, next) => {
  
  await User.deleteOne({
    _id: req.params.id
  });

  res.status(200).send(`Ressource : ${req.user.username} deleted`)


}));


/**
 * Login route
 */
router.post('/login', asyncHandler(async (req, res, next) => {

  const user = await User.findOne({ username: req.body.username });
  if (!user) { return userNotFound(res, req.body.username) }

  const valid = await bcrypt.compare(req.body.password, user.password);
  if (!valid) { return res.status(401).send("Wrong password") }

  // Generate a valid JWT which expires in 7 days.
  const exp = Math.floor(Date.now() / 1000) + 7 * 24 * 3600;
  const permission = user.admin ? 'admin' : 'user';
  const payload = {
    sub: user._id.toString(),
    exp: exp,
    scope: permission
  };

  const token = jwt.sign(payload, secretKey);
  res.send({ token: token });
})
);


async function loadUserFromParamsMiddleware(req, res, next) {

  const userId = req.params.id;
  if (!ObjectId.isValid(userId)) {
    return userNotFound(res, userId);
  }

  const user = await User.findById(req.params.id);
  if (!user) { return userNotFound(res, userId) }

  req.user = user;
  next()
}

function userNotFound(res, userId) {
  return res.status(404).type('text').send(`No user found with ID ${userId}`);
}

/**
 * Count the number of items related to a user
 */
function countItemsByUser(user, callback) {
  Item.countDocuments().where('userId', user._id).exec(callback);
}

/**
 * Checks if requesting user is either an Admin or owner of the ressource
 */
function checkOwnerOrAdmin(req, res, next) {
  const autho = req.currentUserPermissions === 'admin' || req.user.id.toString() === req.currentUserId;
  if (!autho) {
    return res.status(403).send('Insufficient permissions')
  }

  next();
}


/**
 * @apiDefine UserIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the User to retrieve
 */

/**
 * @apiDefine UserInRequestBody
 * @apiParam (Request body) {String{3..30}} username The username of the User (must be unique)
 * @apiParam (Request body) {Boolean} admin Is an admin account or not
 * @apiParam (Request body) {String} registrationdate The registration date of the User ([ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format)
 * @apiParam (Request body) {String{min 8}} password Password of the account
 */

/**
 * @apiDefine UserInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the User
 * @apiSuccess (Response body) {String} username The username of the User
 * @apiSuccess (Response body) {Boolean} admin Is an admin account or not
 * @apiSuccess (Response body) {String} registrationdate The registration date of the User
 */

/**
 * @apiDefine UserNotFoundError
 *
 * @apiError {Object} 404/NotFound No User was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No User found with ID 58b2926f5e1def0123e97bc0
 */

/**
 * @apiDefine UserValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the User's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "User validation failed",
 *       "errors": {
 *         "gender": {
 *           "kind": "enum",
 *           "message": "`foo` is not a valid enum value for path `gender`.",
 *           "name": "ValidatorError",
 *           "path": "gender",
 *           "properties": {
 *             "enumValues": [
 *               "male",
 *               "female",
 *               "other"
 *             ],
 *             "message": "`{VALUE}` is not a valid enum value for path `{PATH}`.",
 *             "path": "gender",
 *             "type": "enum",
 *             "value": "foo"
 *           },
 *           "value": "foo"
 *         }
 *       }
 *     }
 */

module.exports = router;